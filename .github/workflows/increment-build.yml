name: Increment Build

on:
  pull_request_target:
    branches: [develop]
    types: [closed]

jobs:

  verify-changes:
    runs-on: ubuntu-latest
    if: github.base_ref == 'develop' && github.event.pull_request.merged
    outputs:
      build: ${{ steps.list-changes.outputs.build }}
    steps:

      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop

      - name: Get changes
        id: get-changes
        run: echo "files=$(git diff --name-only HEAD^ | xargs)" >> $GITHUB_OUTPUT

      - name: List changed files
        id: list-changes
        run: |
            for file in ${{ steps.get-changes.outputs.files }}; do
                if [[ $file =~ ^(modules|static|templates|quickstart.py|requirements.txt|.dockerignore|Dockerfile).*$ ]] ; then
                    echo "$file will trigger docker build"
                    echo "build=true" >> $GITHUB_OUTPUT
                else
                    echo "$file will not trigger docker build"
                fi
            done

  increment-build:
    runs-on: ubuntu-latest
    needs: [ verify-changes ]
    if: needs.verify-changes.outputs.build == 'true'
    outputs:
      version: ${{ steps.update-version.outputs.version }}
      build-value: ${{ steps.update-version.outputs.build-value }}
      commit-msg: ${{ steps.update-version.outputs.commit-msg }}
      commit-hash: ${{ steps.update-version.outputs.commit-hash }}
      commit-short: ${{ steps.update-version.outputs.commit-short }}
      pr-tag: ${{ steps.update-version.outputs.pr-tag }}
    steps:

      - name: Create App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_TOKEN }}

      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          ref: develop
          fetch-depth: 0

      - name: Update VERSION File
        id: update-version
        run: |
            branch_name=${{ github.event.pull_request.head.ref }}
            repo_name=${{ github.event.pull_request.head.repo.full_name }}
            base_name="${repo_name%/*}"
            if [[ "${branch_name}" =~ ^(master|develop)$ ]]; then
                pr_tag="${base_name}"
            else
                pr_tag="${branch_name}"
            fi
            echo "pr-tag=${pr_tag}" >> $GITHUB_OUTPUT

            value=$(cat VERSION)
            old_msg=$(git log -1 HEAD --pretty=format:%s)
            version="${value%-build*}"

            part_value=$(cat PART)

            if [[ "$value" == *"-"* ]]; then
                build_value="$((${value#*-build} + 1))"
            else
                build_value="1"
            fi

            new_value="${version}-build${build_value}"
            new_msg="[${build_value}] ${old_msg}"

            echo "version=${version}" >> $GITHUB_OUTPUT
            echo "build-value=${build_value}" >> $GITHUB_OUTPUT
            echo "commit-msg=${old_msg}" >> $GITHUB_OUTPUT
            echo "commit-hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "commit-short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

            echo "$new_value" > "VERSION"
            echo "" > "PART"
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add VERSION
            git add PART
            git commit -m "${new_msg}" --amend
            git push origin develop --force-with-lease

  build-releases:
    name: Build ${{ matrix.os_upper }} Installer
    runs-on: ${{ matrix.os }}-${{ matrix.os_version }}
    needs: [ increment-build ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 'windows'
            os_upper: 'Windows'
            os_version: 'latest'
            ext: '.exe'
          - os: 'ubuntu'
            os_upper: 'Linux'
            os_version: '20.04'
            ext: ''
          - os: 'macos'
            os_upper: 'MacOS'
            os_version: '13'
            ext: ''
    steps:

      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Requirements
        run: pip install -r requirements.txt pyinstaller

      - name: Build Executable
        run: |
          pyinstaller -y ./quickstart-develop.spec

      - name: Debug Build Info
        run: |
          echo "Version: ${{ needs.increment-build.outputs.version }}"
          echo "Build Value: ${{ needs.increment-build.outputs.build-value }}"
          echo "Artifact Name: Quickstart-${{ needs.increment-build.outputs.version }}-build${{ needs.increment-build.outputs.build-value }}-${{ runner.os }}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Quickstart-${{ needs.increment-build.outputs.version }}-build${{ needs.increment-build.outputs.build-value }}-${{ runner.os }}
          path: dist/Quickstart${{ matrix.ext }}

  build-release:
    runs-on: ubuntu-latest
    needs: [ build-releases, increment-build ]
    steps:

      - name: Check Out Repo
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Debug Build Output
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.increment-build.outputs.version }}-build${{ needs.increment-build.outputs.build-value }}
          name: Quickstart ${{ needs.increment-build.outputs.version }} Build ${{ needs.increment-build.outputs.build-value }}
          draft: false
          prerelease: false
          files: |
            dist/Quickstart-${{ needs.increment-build.outputs.version }}-build${{ needs.increment-build.outputs.build-value }}-Windows.zip
            dist/Quickstart-${{ needs.increment-build.outputs.version }}-build${{ needs.increment-build.outputs.build-value }}-MacOS.zip
            dist/Quickstart-${{ needs.increment-build.outputs.version }}-build${{ needs.increment-build.outputs.build-value }}-Linux.zip

  docker-build-develop:
    runs-on: ubuntu-latest
    needs: [ increment-build, verify-changes ]
    if: needs.verify-changes.outputs.build == 'true'
    steps:

      - name: Check Out Repo
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          build-args: |
            "BRANCH_NAME=develop"
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_TEAM }}/${{ vars.DOCKER_REPO }}:develop
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Discord Success Notification
        uses: Kometa-Team/discord-notifications@master
        if: success()
        with:
          webhook_id_token: ${{ secrets.BUILD_WEBHOOK }}
          title: "${{ vars.NAME }} develop: ${{ vars.TEXT_SUCCESS }}"
          url: https://github.com/Kometa-Team/${{ vars.REPO_NAME }}/actions/runs/${{ github.run_id }}
          color: ${{ vars.COLOR_SUCCESS }}
          username: ${{ vars.BOT_NAME }}
          avatar_url: ${{ vars.BOT_IMAGE }}
          author: ${{ vars.DOCKER_NAME }}
          author_icon_url: ${{ vars.DOCKER_IMAGE }}

      - name: Discord Failure Notification
        uses: Kometa-Team/discord-notifications@master
        if: failure()
        with:
          webhook_id_token: ${{ secrets.BUILD_WEBHOOK }}
          message: ${{ vars.BUILD_FAILURE_ROLE }}
          title: "${{ vars.NAME }} develop: ${{ vars.TEXT_FAILURE }}"
          url: https://github.com/Kometa-Team/${{ vars.REPO_NAME }}/actions/runs/${{ github.run_id }}
          color: ${{ vars.COLOR_FAILURE }}
          username: ${{ vars.BOT_NAME }}
          avatar_url: ${{ vars.BOT_IMAGE }}
          author: ${{ vars.DOCKER_NAME }}
          author_icon_url: ${{ vars.DOCKER_IMAGE }}

  commit-notification:
    runs-on: ubuntu-latest
    needs: [ increment-build, verify-changes, docker-build-develop ]
    if: ${{ success() && needs.verify-changes.outputs.build == 'true' }}
    steps:

      - name: Send Discord Commit Notification
        uses: Kometa-Team/discord-notifications@master
        with:
          webhook_id_token: ${{ secrets.DEVELOP_WEBHOOK }}
          title: ${{ vars.NAME }} ${{ needs.increment-build.outputs.version }} Build ${{ needs.increment-build.outputs.build-value }}
          url: https://github.com/Kometa-Team/${{ vars.REPO_NAME }}/commit/${{ needs.increment-build.outputs.commit-hash }}
          description: ${{ needs.increment-build.outputs.commit-msg }}
          message: "${{ vars.DEVELOP_ROLE }} - An update to ${{ vars.NAME }} has been published and is available to users of the **develop** branch."
          color: ${{ vars.COLOR_SUCCESS }}
          username: ${{ vars.BOT_NAME }}
          avatar_url: ${{ vars.BOT_IMAGE }}
          author: ${{ vars.NAME }} Develop Release
          author_icon_url: ${{ vars.RELEASE_IMAGE }}
